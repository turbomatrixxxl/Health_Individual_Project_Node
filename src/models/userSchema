const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const gravatar = require('gravatar');

const reminderSchema = new mongoose.Schema({
  text: { type: String, required: true },
  time: { type: String, required: true },
  end: { type: String },
  repeat: { type: String, default: 'noRepeat' },
  type: { type: String, required: true },
  active: { type: Boolean, default: false },
  done: { type: Boolean, default: false },
  frequency: { type: mongoose.Schema.Types.Mixed, required: true },
  doneDates: { type: [String], default: [] },
});

const userSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      minLength: 3,
      required: [true, 'Username required'],
    },
    email: {
      type: String,
      required: [true, 'Email is required'],
      unique: true,
    },
    password: {
      type: String,
      required: [true, 'Password is required'],
    },
    height: {
      type: Number,
      default: 0,
    },
    desiredWeight: {
      type: Number,
      default: 0,
    },
    age: {
      type: Number,
      default: 0,
    },
    bloodType: {
      type: Number,
      default: 0,
    },
    weight: {
      type: Number,
      default: 0,
    },
    token: {
      type: String,
      default: null,
    },
    avatarURL: {
      type: String,
      minLength: 2,
    },
    verify: {
      type: Boolean,
      default: false,
    },
    verificationToken: {
      type: String,
      default: null, // Default to null if no token is provided
    },
    dietaryInfo: {
      dailyCalorieIntake: {
        type: Number,
        required: true,
        default: 2000,
      },
      restrictedAliments: [
        {
          categories: { type: String },
          title: { type: String },
          calories: { type: Number },
          weight: { type: Number },
          // Add other fields as necessary
        },
      ],
    },
    consumedProducts: [
      {
        productName: {
          type: String,
          default: '',
        },
        product: { type: mongoose.Schema.Types.ObjectId, ref: 'Health' },
        date: { type: Date, required: true },
        quantity: { type: Number, required: true },
        calories: { type: Number, required: true },
      },
    ],
    steps: [
      {
        date: { type: Date, required: true },
        interval: [
          {
            exerciseType: { type: String, required: true, default: 'walking' },
            minutes: { type: String, required: true, default: '00' },
            intensity: { type: String, required: true, default: 'min' },
            steps: { type: Number, required: true, default: 0 },
          },
        ],
      },
    ],
    sleep: [
      {
        date: { type: Date, required: true },
        interval: [
          {
            fromHour: { type: String, default: '00' },
            fromMinute: { type: String, default: '00' },
            fromAmPm: { type: String, default: 'AM' },
            tillHour: { type: String, default: '00' },
            tillMinute: { type: String, default: '00' },
            tillAmPm: { type: String, default: 'AM' },
          },
        ],
      },
    ],
    heart: [
      {
        systolic: { type: Number, required: true },
        diastolic: { type: Number, required: true },
        pulse: { type: Number, required: true },
        date: { type: Date, required: true },
        time: { type: String, default: '00:00:00' },
      },
    ],
    reminders: {
      type: [reminderSchema],
      default: [
        {
          text: 'Take breakfast',
          time: '06:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '10:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
        },
        {
          text: 'Take lunch',
          time: '12:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '14:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
        },
        {
          text: 'Take dinner',
          time: '17:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '19:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
        },
        {
          text: 'Go to sleep',
          time: '20:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '00:00',
          type: 'sleep',
          active: false,
          done: false,
          doneDates: [],
        },
        {
          text: 'Wake up',
          time: '06:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '07:00',
          type: 'sleep',
          active: false,
          done: false,
          doneDates: [],
        },
        {
          text: 'Record Breakfast meal',
          time: '10:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
          link: '/diary',
        },
        {
          text: 'Record Lunch meal',
          time: '13:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
          link: '/diary',
        },
        {
          text: 'Record Dinner meal',
          time: '19:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'meal',
          active: false,
          done: false,
          doneDates: [],
          link: '/diary',
        },
        {
          text: 'Record Sleep period',
          time: '19:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'sleep',
          active: false,
          done: false,
          doneDates: [],
          link: '/sleep',
        },
        {
          text: 'Record Heart metrix',
          time: '08:00',
          frequency: '15 monthly',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'metrix',
          active: false,
          done: false,
          doneDates: [],
          link: '/metrix',
        },
        {
          text: 'Record Exercise period',
          time: '18:00',
          frequency: 'daily',
          repeat: 'noRepeat',
          end: '23:00',
          type: 'exercise',
          active: false,
          done: false,
          doneDates: [],
          link: '/physical',
        },
        {
          text: 'Drink water',
          time: '06:00',
          frequency: 'daily',
          repeat: '2 hours',
          end: '23:00',
          type: 'water',
          active: false,
          done: false,
          doneDates: [],
        },
      ],
    },
  },
  { versionKey: false, timestamps: true }
);

userSchema.methods.setPassword = function (password) {
  this.password = bcrypt.hashSync(password, bcrypt.genSaltSync(10));
};

userSchema.methods.validPassword = function (password) {
  return bcrypt.compareSync(password, this.password);
};

userSchema.pre('save', function (next) {
  if (!this.avatarURL) {
    this.avatarURL = gravatar.url(
      this.email,
      { s: 200, r: 'pg', d: 'identicon' },
      true
    );
  }
  next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
